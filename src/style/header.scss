// SCSS allows the storage of variables and their associated values.
//All variables are declared with a `$` followed by the variable name.
// Variables can be used anywhere in the project once they are declared and imported into main.scss.
$bold: 700;

// Mixins are a great way to reduce duplicate code in SCSS.
// When included in a tag style, the mixin will add whatever styles it has to the tag it was called into.\
// Multiple tag styles can all call the same mixin.
@mixin big-red-text {
    color: red;
    font-size: 4rem;
}

// Basic format for styling classes and IDs is the same as vanilla CSS3.
.header {
    font-size: 2rem;
    font-weight: $bold;  // The variable from above was called here.
    color: rgb(54, 9, 47);
    margin: 10px;
}

// Pseudo-selectors work just as they do in vanilla CSS3.
// This selector is only applying the styles to the 2nd instance of the header class.
.header:nth-of-type(2) {
    font-family: 'Times New Roman';
    @include big-red-text;  // The mixin from above was called here with the @include statement.
}

.header:nth-of-type(3) {

    margin-top: 20px;

    /*
    SCSS really brings out the idea of Cascading or Nesting style sheets.
    By placing tag styles inside of another tag style, it acts just like nested HTML tags do.
    Thus the styles will only apply to tags that are nested inside of the parent tag above.
    In this case, the parent is .header:nth-of-type(3)
    */
    hr {
        // Because this tag style is nested, it will only apply to <hr> tags that are inside of .header:nth-of-type(3) tags.
        // This is why only the <hr> in the 3rd header is red and has a shadow.
        color: red;
        box-shadow: 0px 0px 10px 2px black;
    }
}
